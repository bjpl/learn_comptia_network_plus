import React from 'react';
import { createBrowserRouter } from 'react-router-dom';
import { Layout } from './components/shared/Layout';
import { ErrorBoundary } from './components/shared/ErrorBoundary';
import { ProtectedRoute } from './components/auth/ProtectedRoute';
import { LoginForm } from './components/auth/LoginForm';
import { RegisterForm } from './components/auth/RegisterForm';
import { UserProfile } from './components/auth/UserProfile';

// Lazy load pages
const Dashboard = React.lazy(() => import('./pages/Dashboard'));
const NotFound = React.lazy(() => import('./pages/NotFound'));

// OSI Model Components (LO 1.0)
const LayerExplanationBuilder = React.lazy(() => import('./components/osi/LayerExplanationBuilder'));
const PacketJourneySimulator = React.lazy(() => import('./components/osi/PacketJourneySimulator'));
const TroubleshootingScenarios = React.lazy(() => import('./components/osi/TroubleshootingScenarios'));

// Networking Appliances Components (LO 1.1)
const ComparisonMatrix = React.lazy(() => import('./components/appliances/ComparisonMatrix'));
const DecisionTree = React.lazy(() => import('./components/appliances/DecisionTree'));
const NetworkSimulator = React.lazy(() => import('./components/appliances/NetworkSimulator'));

// Cloud Concepts Components (LO 1.2)
const CloudSummaryBuilder = React.lazy(() => import('./components/cloud/CloudSummaryBuilder'));
const CloudArchitectureDesigner = React.lazy(() => import('./components/cloud/CloudArchitectureDesigner'));

// Ports & Protocols Components (LO 1.3)
const PortProtocolTrainer = React.lazy(() => import('./components/protocols/PortProtocolTrainer'));
const TrafficTypeDemo = React.lazy(() => import('./components/protocols/TrafficTypeDemo'));
const PortScanner = React.lazy(() => import('./components/protocols/PortScanner'));

// Transmission Media Components (LO 1.4)
const MediaSelectionMatrix = React.lazy(() => import('./components/media/MediaSelectionMatrix'));
const ConnectorLab = React.lazy(() => import('./components/media/ConnectorLab'));
const TransceiverMatch = React.lazy(() => import('./components/media/TransceiverMatch'));

// Network Topologies Components (LO 1.5)
const TopologyAnalyzer = React.lazy(() => import('./components/topologies/TopologyAnalyzer'));
const TopologyTransformer = React.lazy(() => import('./components/topologies/TopologyTransformer'));

// IPv4 Addressing Components (LO 1.7)
const SubnetDesigner = React.lazy(() => import('./components/ipv4/SubnetDesigner'));
const IPv4Troubleshooting = React.lazy(() => import('./components/ipv4/IPv4Troubleshooting'));

// Modern Networking Components (LO 1.8)
const TechnologySummarizer = React.lazy(() => import('./components/modern/TechnologySummarizer'));
const IPv6Planner = React.lazy(() => import('./components/modern/IPv6Planner'));
const IaCBuilder = React.lazy(() => import('./components/modern/IaCBuilder'));

// Assessment Components
const ScenarioSimulator = React.lazy(() => import('./components/assessment/ScenarioSimulator'));
const ProgressDashboard = React.lazy(() => import('./components/assessment/ProgressDashboard'));

// Loading component
const LoadingFallback = () => (
  <div className="flex items-center justify-center min-h-[60vh]">
    <div className="text-center">
      <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      <p className="mt-4 text-gray-600 dark:text-gray-400">Loading...</p>
    </div>
  </div>
);

// Breadcrumb data for navigation
export const breadcrumbMap: Record<string, { title: string; parent?: string }> = {
  '/': { title: 'Dashboard' },

  // OSI Model
  '/osi': { title: 'OSI Model' },
  '/osi/layer-builder': { title: 'Layer Explanation Builder', parent: '/osi' },
  '/osi/packet-journey': { title: 'Packet Journey Simulator', parent: '/osi' },
  '/osi/troubleshooting': { title: 'Troubleshooting Scenarios', parent: '/osi' },

  // Networking Appliances
  '/appliances': { title: 'Network Appliances' },
  '/appliances/comparison': { title: 'Comparison Matrix', parent: '/appliances' },
  '/appliances/decision-tree': { title: 'Decision Tree', parent: '/appliances' },
  '/appliances/simulator': { title: 'Network Simulator', parent: '/appliances' },

  // Cloud Concepts
  '/cloud': { title: 'Cloud Computing' },
  '/cloud/summary-builder': { title: 'Cloud Summary Builder', parent: '/cloud' },
  '/cloud/architecture': { title: 'Architecture Designer', parent: '/cloud' },

  // Protocols
  '/protocols': { title: 'Protocols & Ports' },
  '/protocols/trainer': { title: 'Port Protocol Trainer', parent: '/protocols' },
  '/protocols/traffic-demo': { title: 'Traffic Type Demo', parent: '/protocols' },
  '/protocols/scanner': { title: 'Port Scanner', parent: '/protocols' },

  // Physical Media
  '/media': { title: 'Physical Media' },
  '/media/selection-matrix': { title: 'Media Selection Matrix', parent: '/media' },
  '/media/connector-lab': { title: 'Connector Lab', parent: '/media' },
  '/media/transceiver': { title: 'Transceiver Match', parent: '/media' },

  // Topologies
  '/topologies': { title: 'Network Topologies' },
  '/topologies/analyzer': { title: 'Topology Analyzer', parent: '/topologies' },
  '/topologies/transformer': { title: 'Topology Transformer', parent: '/topologies' },

  // IPv4
  '/ipv4': { title: 'IPv4 & Subnetting' },
  '/ipv4/subnet-designer': { title: 'Subnet Designer', parent: '/ipv4' },
  '/ipv4/troubleshooting': { title: 'IPv4 Troubleshooting', parent: '/ipv4' },

  // Modern Networking
  '/modern': { title: 'Modern Networking' },
  '/modern/technology': { title: 'Technology Summarizer', parent: '/modern' },
  '/modern/ipv6': { title: 'IPv6 Planner', parent: '/modern' },
  '/modern/iac': { title: 'IaC Builder', parent: '/modern' },

  // Assessment
  '/assessment': { title: 'Assessment' },
  '/assessment/simulator': { title: 'Scenario Simulator', parent: '/assessment' },
  '/assessment/dashboard': { title: 'Progress Dashboard', parent: '/assessment' },

  // Auth
  '/login': { title: 'Login' },
  '/register': { title: 'Register' },
  '/profile': { title: 'Profile' },
};

export const router = createBrowserRouter([
  // ========== Auth Routes (Public) ==========
  {
    path: '/login',
    element: (
      <ErrorBoundary>
        <LoginForm />
      </ErrorBoundary>
    ),
  },
  {
    path: '/register',
    element: (
      <ErrorBoundary>
        <RegisterForm />
      </ErrorBoundary>
    ),
  },

  // ========== Protected Routes ==========
  {
    path: '/',
    element: (
      <ErrorBoundary>
        <Layout />
      </ErrorBoundary>
    ),
    children: [
      // Dashboard (Public for now, can be protected later)
      {
        index: true,
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <Dashboard />
          </React.Suspense>
        ),
      },

      // User Profile (Protected)
      {
        path: 'profile',
        element: (
          <ProtectedRoute>
            <React.Suspense fallback={<LoadingFallback />}>
              <UserProfile />
            </React.Suspense>
          </ProtectedRoute>
        ),
      },

      // ========== OSI Model Routes (LO 1.0) ==========
      {
        path: 'osi/layer-builder',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <LayerExplanationBuilder />
          </React.Suspense>
        ),
      },
      {
        path: 'osi/packet-journey',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <PacketJourneySimulator />
          </React.Suspense>
        ),
      },
      {
        path: 'osi/troubleshooting',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <TroubleshootingScenarios />
          </React.Suspense>
        ),
      },

      // ========== Networking Appliances Routes (LO 1.1) ==========
      {
        path: 'appliances/comparison',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <ComparisonMatrix />
          </React.Suspense>
        ),
      },
      {
        path: 'appliances/decision-tree',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <DecisionTree />
          </React.Suspense>
        ),
      },
      {
        path: 'appliances/simulator',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <NetworkSimulator />
          </React.Suspense>
        ),
      },

      // ========== Cloud Concepts Routes (LO 1.2) ==========
      {
        path: 'cloud/summary-builder',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <CloudSummaryBuilder />
          </React.Suspense>
        ),
      },
      {
        path: 'cloud/architecture',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <CloudArchitectureDesigner />
          </React.Suspense>
        ),
      },

      // ========== Ports & Protocols Routes (LO 1.3) ==========
      {
        path: 'protocols/trainer',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <PortProtocolTrainer />
          </React.Suspense>
        ),
      },
      {
        path: 'protocols/traffic-demo',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <TrafficTypeDemo />
          </React.Suspense>
        ),
      },
      {
        path: 'protocols/scanner',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <PortScanner />
          </React.Suspense>
        ),
      },

      // ========== Transmission Media Routes (LO 1.4) ==========
      {
        path: 'media/selection-matrix',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <MediaSelectionMatrix />
          </React.Suspense>
        ),
      },
      {
        path: 'media/connector-lab',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <ConnectorLab />
          </React.Suspense>
        ),
      },
      {
        path: 'media/transceiver',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <TransceiverMatch />
          </React.Suspense>
        ),
      },

      // ========== Network Topologies Routes (LO 1.5) ==========
      {
        path: 'topologies/analyzer',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <TopologyAnalyzer />
          </React.Suspense>
        ),
      },
      {
        path: 'topologies/transformer',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <TopologyTransformer />
          </React.Suspense>
        ),
      },

      // ========== IPv4 Addressing Routes (LO 1.7) ==========
      {
        path: 'ipv4/subnet-designer',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <SubnetDesigner />
          </React.Suspense>
        ),
      },
      {
        path: 'ipv4/troubleshooting',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <IPv4Troubleshooting />
          </React.Suspense>
        ),
      },

      // ========== Modern Networking Routes (LO 1.8) ==========
      {
        path: 'modern/technology',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <TechnologySummarizer />
          </React.Suspense>
        ),
      },
      {
        path: 'modern/ipv6',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <IPv6Planner />
          </React.Suspense>
        ),
      },
      {
        path: 'modern/iac',
        element: (
          <React.Suspense fallback={<LoadingFallback />}>
            <IaCBuilder />
          </React.Suspense>
        ),
      },

      // ========== Assessment Routes (Protected) ==========
      {
        path: 'assessment/simulator',
        element: (
          <ProtectedRoute>
            <React.Suspense fallback={<LoadingFallback />}>
              <ScenarioSimulator />
            </React.Suspense>
          </ProtectedRoute>
        ),
      },
      {
        path: 'assessment/dashboard',
        element: (
          <ProtectedRoute>
            <React.Suspense fallback={<LoadingFallback />}>
              <ProgressDashboard />
            </React.Suspense>
          </ProtectedRoute>
        ),
      },
    ],
  },

  // 404 Not Found - Must be last
  {
    path: '*',
    element: (
      <ErrorBoundary>
        <React.Suspense fallback={<LoadingFallback />}>
          <NotFound />
        </React.Suspense>
      </ErrorBoundary>
    ),
  },
]);
