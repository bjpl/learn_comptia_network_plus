name: Backend CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.comptianetwork.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS (Staging)
        run: |
          # Update ECS task definition with new image
          aws ecs update-service \
            --cluster comptia-staging \
            --service backend-service \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster comptia-staging \
            --services backend-service

      - name: Run database migrations
        run: |
          # Run migrations via ECS task
          aws ecs run-task \
            --cluster comptia-staging \
            --task-definition db-migration \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=ENABLED}"

      - name: Health check
        run: |
          sleep 30
          curl -f https://staging-api.comptianetwork.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Backend deployment to staging: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.comptianetwork.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Create backup
        run: |
          # Trigger database backup
          aws ecs run-task \
            --cluster comptia-production \
            --task-definition db-backup \
            --launch-type FARGATE

      - name: Deploy to ECS (Production) - Blue/Green
        run: |
          # Blue/Green deployment
          aws deploy create-deployment \
            --application-name comptia-backend \
            --deployment-group-name production \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deploy backend ${{ github.sha }}"

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster comptia-production \
            --services backend-service

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster comptia-production \
            --task-definition db-migration \
            --launch-type FARGATE

      - name: Health check
        run: |
          sleep 30
          curl -f https://api.comptianetwork.com/health || exit 1

      - name: Run smoke tests
        run: |
          curl -f https://api.comptianetwork.com/api/v1/courses || exit 1
          curl -f https://api.comptianetwork.com/api/v1/health/readiness || exit 1

      - name: Monitor error rate
        run: |
          # Check CloudWatch metrics for error rate
          ERROR_RATE=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/ApplicationELB \
            --metric-name HTTPCode_Target_5XX_Count \
            --dimensions Name=LoadBalancer,Value=app/comptia-prod \
            --statistics Sum \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
            --period 300 \
            --query 'Datapoints[0].Sum' \
            --output text)

          if [ "$ERROR_RATE" != "None" ] && [ "$ERROR_RATE" -gt 10 ]; then
            echo "Error rate too high: $ERROR_RATE"
            exit 1
          fi

      - name: Create release tag
        if: success()
        run: |
          git tag -a "backend-v$(date +%Y%m%d-%H%M%S)" -m "Production deployment"
          git push origin --tags

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Rollback to previous task definition
          PREVIOUS_TASK=$(aws ecs describe-services \
            --cluster comptia-production \
            --services backend-service \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)

          aws ecs update-service \
            --cluster comptia-production \
            --service backend-service \
            --task-definition $PREVIOUS_TASK \
            --force-new-deployment

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Backend deployment to production: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          mention: 'here'
          if_mention: failure
